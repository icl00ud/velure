version: "3.8"

services:
  # -------------------------
  # Auth Service
  # -------------------------
  postgres:
    image: postgres:17.2-alpine3.21
    container_name: ${POSTGRES_HOST}
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DATABASE_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - auth
      - order

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: ${AUTH_SERVICE_HOST:-auth-service}
    restart: always
    environment:
      AUTH_SERVICE_APP_PORT: ${AUTH_SERVICE_APP_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DATABASE_NAME: ${POSTGRES_DATABASE_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_URL: ${POSTGRES_URL}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      JWT_REFRESH_TOKEN_SECRET: ${JWT_REFRESH_TOKEN_SECRET}
      JWT_REFRESH_TOKEN_EXPIRES_IN: ${JWT_REFRESH_TOKEN_EXPIRES_IN}
      SESSION_SECRET: ${SESSION_SECRET}
      SESSION_EXPIRES_IN: ${SESSION_EXPIRES_IN}
    ports:
      - "${AUTH_SERVICE_APP_PORT}:${AUTH_SERVICE_APP_PORT}"
    networks:
      - auth
      - order

  # -------------------------
  # Order Services
  # -------------------------
  rabbitmq:
    image: rabbitmq:3.13.7-management-alpine
    container_name: ${RABBITMQ_HOST}
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq-entrypoint.sh:/docker-entrypoint.sh
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "15672:15672"
    networks:
      - order
    entrypoint: ["/bin/bash", "/docker-entrypoint.sh"]


  publish-order-service:
    build:
      context: ./publish-order-service
      dockerfile: Dockerfile
    container_name: ${PUBLISH_ORDER_SERVICE_HOST}
    restart: always
    environment:
      PUBLISHER_ORDER_SERVICE_APP_PORT: ${PUBLISHER_ORDER_SERVICE_APP_PORT}
      PUBLISHER_RABBITMQ_URL: ${PUBLISHER_RABBITMQ_URL}
      ORDER_EXCHANGE: ${ORDER_EXCHANGE}
      POSTGRES_URL: ${POSTGRES_URL}
    ports:
      - "${PUBLISHER_ORDER_SERVICE_APP_PORT}:${PUBLISHER_ORDER_SERVICE_APP_PORT}"
    networks:
      - order

  process-order-service:
    build:
      context: ./process-order-service
      dockerfile: Dockerfile
    container_name: ${PROCESS_ORDER_SERVICE_HOST}
    restart: always
    environment:
      PROCESS_ORDER_SERVICE_APP_PORT: ${PROCESS_ORDER_SERVICE_APP_PORT}
      PROCESS_RABBITMQ_URL: ${PROCESS_RABBITMQ_URL}
      RABBITMQ_ORDER_QUEUE: ${RABBITMQ_ORDER_QUEUE}
      ORDER_EXCHANGE: ${ORDER_EXCHANGE}
      POSTGRES_URL: ${POSTGRES_URL}
    ports:
      - "${PROCESS_ORDER_SERVICE_APP_PORT}:${PROCESS_ORDER_SERVICE_APP_PORT}"
    networks:
      - order

  # -------------------------
  # Product Service + Cache + DB
  # -------------------------
  mongodb:
    image: arm64v8/mongo:6.0
    container_name: ${MONGODB_HOST}
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD}
    volumes:
      - mongodb_data:/data/db
      - ./product-service/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - "${MONGODB_PORT}:${MONGODB_PORT}"
    networks:
      - order

  redis:
    image: redis:8.0-rc1
    container_name: ${REDIS_CONTAINER_NAME}
    restart: always
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    networks:
      - order

  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: ${PRODUCT_SERVICE_HOST}
    restart: always
    environment:
      PRODUCT_SERVICE_APP_PORT: ${PRODUCT_SERVICE_APP_PORT}
      PRODUCT_SERVICE_URL: ${PRODUCT_SERVICE_URL}
      MONGODB_HOST: ${MONGODB_HOST}
      MONGODB_PORT: ${MONGODB_PORT}
      MONGODB_DBNAME: ${MONGODB_DBNAME}
      MONGODB_NORMAL_USER: ${MONGODB_NORMAL_USER}
      MONGODB_NORMAL_PASSWORD: ${MONGODB_NORMAL_PASSWORD}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_URL: ${REDIS_URL}
    ports:
      - "${PRODUCT_SERVICE_APP_PORT}:${PRODUCT_SERVICE_APP_PORT}"
    networks:
      - order

volumes:
  postgres_data:
  mongodb_data:
  rabbitmq_data:

networks:
  auth:
    driver: bridge
  order:
    driver: bridge
